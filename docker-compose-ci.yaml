version: "3.9"
services:
  front:
    image: sermalenk/skypro-front:lesson_38
    ports:
      - "8080:80"
    depends_on:
      - api

  migrations:
    image: verevkinaee/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate"
    volumes:
      - .:/code

  api:
    image: verevkinaee/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"

  postgres:
    image: postgres
    environment:
        POSTGRES_USER: ${DB_USER}
        POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./db/:/var/lib/postgresql/data

  telegram_bot:
    image: verevkinaee/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: >
      sh -c "python manage.py runbot"
    volumes:
      - .:/code